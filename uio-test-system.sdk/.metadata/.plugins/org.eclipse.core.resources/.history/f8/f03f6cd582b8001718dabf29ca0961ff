/**
 *******************************************************************************
 *******************************************************************************
 *
 * @file    main.c
 * @author  R. Bush
 * @email   bush@krtkl.com
 * @version 0.1
 * @date    2017 October 17
 * @brief   Userspace Controlled Interrupt and Memory Interface Testing
 * @license FreeBSD
 *
 *******************************************************************************
 *
 * Copyright (c) 2016, krtkl inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the FreeBSD Project.
 *
 *******************************************************************************
 */


#include <ctype.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <unistd.h>
#include <assert.h>
#include <fcntl.h>
#include <dirent.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdarg.h>
#include <string.h>
#include <errno.h>
#include <err.h>

#include "uio.h"

#ifdef DEBUG
# define DEBUG_PRINT(__FORMAT__, args...)					\
		fprintf(stderr, "DEBUG: %s [%d]: %s(): " __FORMAT__ "\n",	\
			__FILE__, __LINE__, __FUNCTION__, ##args)
#else
# define DEBUG_PRINT(...)														\
							do {} while (0)
#endif


#define print_error(__FORMAT__, args...)					\
		fprintf(stderr, "ERROR: %s [%d]: %s(): " __FORMAT__ "\n",	\
			__FILE__, __LINE__, __FUNCTION__, ##args)


#define FILENAME_MAX_LEN			(128)
#define ATTR_MAX_LEN				(64)
#define ATTR_VALUE_MAX_LEN			(64)

#define SYSFS_UIO_BASE				"/sys/class/uio/"

#define INPUT_BUFFER_SIZE			(128)
#define INPUT_BUFFER_BASE			(0x43C0000UL)


#define AXI_GPIO_BASEADDRESS			(0x41200000UL)
#define AXI_GPIO_ADDR_SIZE			(0x00010000UL)

#define AXI_GPIO_CH1DATA_OFFSET			(0x00000000UL)
#define AXI_GPIO_CH1TRI_OFFSET			(0x00000004UL)
#define AXI_GPIO_GIER_OFFSET			(0x0000011CUL)
#define AXI_GPIO_IPISR_OFFSET			(0x00000120UL)
#define AXI_GPIO_IPIER_OFFSET			(0x00000128UL)


#define VERSION_STR	"0.1"

const char *const uiotest_version =
"uiotest v" VERSION_STR "\n"
"Copyright (c) 2017, krtkl inc.";

const char *const uiotest_license =
"This software may be distributed under the terms of the BSD license.\n";




void usage(void)
{
	printf("Usage: uiotest uio_num [-d]\n");
}





struct uio_map_info *uio_read_maps(int uio_num)
{
	int i, map_num, num = 0;
	char dirname[FILENAME_MAX_LEN];
	DIR *dir;
	struct dirent *ent;
	struct uio_map_info *pmap, *maps = NULL;

	sprintf(dirname, SYSFS_UIO_BASE "uio%d/maps", uio_num);

	dir = opendir(dirname);
	if (!dir)
		goto out;

	while (1) {
		ent = readdir(dir);
		if (ent == NULL)
			break;

		if (ent->d_type == DT_DIR) {
			/* The entry is a directory */

			/* Special directories */
			if ((strcmp(ent->d_name, ".") == 0) ||
					(strcmp(ent->d_name, "..") == 0))
				continue;

			if (sscanf(ent->d_name, "map%d", &map_num) == 1) {
				DEBUG_PRINT("Map found %d", map_num);
				num++;
			}
		} else {
			/* The entry is a file */
		}
	}

	if (num) {
		maps = malloc(sizeof(struct uio_map_info) * num);
		if (maps == NULL)
			goto out;

		pmap = maps;
		for (i = 0; i < num; i++, pmap++) {
			pmap->num = i;
			uio_get_mem_name(uio_num, pmap->num, pmap->name);
			uio_get_mem_addr(uio_num, pmap->num, &pmap->addr);
			uio_get_mem_size(uio_num, pmap->num, &pmap->size);
			uio_get_mem_offset(uio_num, pmap->num, &pmap->offset);
		}
	}

	closedir(dir);
	return maps;

out:
	closedir(dir);
	return maps;
}


int uio_validate(void)
{
	/*
	 * Each UIO device has a sysfs entry with an attributes directory defined
	 * in /sys/class/uio/uioX
	 */


	/*
	 * Each UIO device has one or more memory regions, each defined within the
	 * UIO sysfs maps directory /sys/class/uio/uioX/maps/mapY
	 *
	 * The attributes of each memory region are defined in four RO files
	 * - name:		Optional string identifier for the map
	 * - addr:		Memory start address
	 * - size:		Size, in bytes, of the memory starting at addr
	 * - offset:	Offset, in bytes, that has to be added to the pointer
	 * 				returned by mmap() to get to the device memory. This will
	 * 				apply if the device's memory is not page aligned. Pointers
	 * 				returned by mmap() are always page aligned.
	 */


	/* Determine the memory size (used to map the memory) */
//sprintf(uio_size_path, "/sys/class/uio/uio%d/maps/map0/size", uio_num);

	return (0);
}




void uio_terminate(int signo)
{
	if (signo == SIGINT) {
		DEBUG_PRINT("SIGINT received");
		exit(EXIT_SUCCESS);
	} else if (signo == SIGKILL) {
		DEBUG_PRINT("SIGKILL received");
		exit(EXIT_SUCCESS);
	}
}


int uio_run(void)
{
	size_t nb;
	unsigned long tri, ier, gier, data, ch, isr;
	int fd;
	void *iomem;

	unsigned long npending;

	DEBUG_PRINT("Opening UIO device /dev/uio0");

	fd = open("/dev/uio0", O_RDWR | O_SYNC);
	if (fd < 0) {
		print_error("Failure to open /dev/uio0 device - %s", strerror(errno));
	}

	DEBUG_PRINT("Mapping memory region for UIO device");

	iomem = mmap(NULL,
				AXI_GPIO_ADDR_SIZE,
				PROT_READ | PROT_WRITE,
				MAP_SHARED,
				fd,
				0);

	if (iomem == MAP_FAILED) {
		print_error("Failure to map memory - %s", strerror(errno));

		close(fd);
		return EXIT_FAILURE;
	}

	DEBUG_PRINT("Initializing AXI GPIO peripheral...");

	/* Initialize the interrupts on the GPIO peripheral */
	*((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_GIER_OFFSET)) = 0;

	usleep(1000 * 50);

	gier = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_GIER_OFFSET));
	DEBUG_PRINT("GPIO_GIER: 0x%lx", gier);


	/* Check the direction of the pin */
	tri = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_CH1TRI_OFFSET));
	DEBUG_PRINT("GPIO_TRI: 0x%lx", tri);

	tri |= (1 << 0);

	*((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_CH1TRI_OFFSET)) = tri;

	usleep(1000 * 50);

	tri = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_CH1TRI_OFFSET));
	DEBUG_PRINT("GPIO_TRI: 0x%lx", tri);

	usleep(1000 * 50);

	ier = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_IPIER_OFFSET));
	DEBUG_PRINT("GPIO_IPIER: 0x%lx", ier);

	ier |= (1 << 0);

	*((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_IPIER_OFFSET)) = ier;

	usleep(1000 * 50);

	ier = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_IPIER_OFFSET));
	DEBUG_PRINT("GPIO_IPIER: 0x%lx", ier);

	DEBUG_PRINT("Enabling global interrupts");

	*((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_GIER_OFFSET)) = (1 << 31);

	usleep(1000 * 50);

	gier = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_GIER_OFFSET));
	DEBUG_PRINT("GPIO_GIER: 0x%lx", gier);

	DEBUG_PRINT("Waiting for interrupt to occur");

	while (1) {
		/* Unmask the interrupt */
		ier = 1;
		nb = write(fd, &ier, sizeof(ier));
		if (nb < sizeof(ier)) {
			print_error("Unmasking interrupts");
			munmap(iomem, AXI_GPIO_ADDR_SIZE);
			close(fd);
			return EXIT_FAILURE;
		}

		/* Wait for an interrupt */
		nb = read(fd, &npending, sizeof(unsigned long));

		if (npending) {
			/* Handle the interrupt */
			printf("Button status change was detected %lu\n", npending);

			/* Read the interrupt status register */
			isr = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_IPISR_OFFSET));
			DEBUG_PRINT("GPIO_IPISR: 0x%lx", isr);

			if (isr)
				*((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_IPISR_OFFSET)) = isr;

			data = *((volatile uint32_t *)((uint8_t *)iomem + AXI_GPIO_CH1DATA_OFFSET));
			DEBUG_PRINT("GPIO_DATA: 0x%lx", data);
		}
	}

	munmap(iomem, AXI_GPIO_ADDR_SIZE);
	close(fd);

	return EXIT_SUCCESS;
}




int main(int argc, char **argv)
{
	int opt, status;
	int daemonize;
	pid_t pid;

	/* Make sure we can handle SIGINT */
	if (signal(SIGINT, uio_terminate) == SIG_ERR)
		exit(EXIT_FAILURE);

	/* Parse the command line arguments */
	while ((opt = getopt(argc, argv, "d")) != -1) {
		switch (opt) {
		case 'd':
			/* Daemonize the process */
			daemonize = 1;
			break;
		case '?':
			if (isprint(optopt))
				print_error("Unknown option `-%c'", optopt);
			else
				print_error("Unknown option character `\\x%x'", optopt);

			usage();
			return EXIT_FAILURE;
		default:
			usage();
			return EXIT_FAILURE;
		}
	}

	/* Should we daemonize the process? */
	if (daemonize) {

		pid = fork();
		if (pid < 0) {
			print_error("Failed to fork process");
			err(EXIT_FAILURE, NULL);
		} else if (pid > 0) {
			/* Fork successful. Print information about the process and exit. */
			printf("UIO test daemon starting with PID: %d\n", pid);
			return EXIT_SUCCESS;
		}
	}

	/* Run the UIO handler */
	status = uio_run();
	exit(status);
}
